CREATE TABLE long-chariot-348511.chapter3.popular_products (
    product_id string(255)
  , category   string(255)
  , score      numeric
);

INSERT INTO long-chariot-348511.chapter3.popular_products
VALUES
    ('A001', 'action', 94)
  , ('A002', 'action', 81)
  , ('A003', 'action', 78)
  , ('A004', 'action', 64)
  , ('D001', 'drama' , 90)
  , ('D002', 'drama' , 82)
  , ('D003', 'drama' , 78)
  , ('D004', 'drama' , 58)
;

select product_id, score,
row_number() over(order by score desc) as row, --row_number() : 순서에서 유일한 순위 번호를 매김 / order by로 정렬한 순서 --
rank() over(order by score desc) as rank, -- rank() : 동순위가 있으면 뒷 순위 번호 건너뜀 --
dense_rank() over(order by score desc) as dense_rank, -- dense_rank() : 동순위가 있어도 뒷 순위 번호 나타냄 --
lag(product_id) over(order by score desc) as lag1, -- lag(출력할 칼럼, n) : 현재 행을 기준으로 n만큼의 앞의 값 (n 생략시 1)--
lag(product_id, 2) over(order by score desc) as lag2,
lead(product_id) over(order by score desc) as lead1, -- lead(출력할 칼럼, n) : 현재 행을 기준으로 n만큼의 뒤의 값 -- 
lead(product_id, 2) over(order by score desc) as lead2
from long-chariot-348511.chapter3.popular_products
order by row;

select product_id, score,
row_number() over(order by score desc) as row,
sum(score) over(order by score desc rows between unbounded preceding and current row) as cum_score, -- 이전 행을 모두 더하여 누적 합계 계산--
avg(score) over(order by score desc rows between 1 preceding and 1 following) as local_avg, -- 현재 행과 바로 이전,이후 행을 더하여 평균값 계산 --
first_value(product_id) over(order by score desc rows between unbounded preceding and unbounded following) as first_value, -- first_value() : 가장 첫번째 레코드 추출 --
last_value(product_id) over(order by score desc rows between unbounded preceding and unbounded following) as last_value -- last_value() : 가장 마지막 레코드 추출 --
from long-chariot-348511.chapter3.popular_products
order by row;

select category, product_id,score,
row_number() over(partition by category order by score desc) as row, -- 카테고리 별로 점수 순서로 정렬하고 순위를 매김 / partition by : group by와 비슷 --
rank() over(partition by category order by score desc) as rank,
dense_rank() over(partition by category order by score desc) as dense_rank
from long-chariot-348511.chapter3.popular_products
order by category, row;

select *
from (select category, product_id, score, -- 서브쿼리 사용 --
row_number() over(partition by category order by score desc) as rank -- 서브쿼리에서 순위 계산 -- 
from long-chariot-348511.chapter3.popular_products)
as popular_products_with_rank
where rank <= 2
order by category, rank;

select distinct category,
first_value(product_id) over(partition by category order by score desc rows between unbounded preceding and unbounded following) as prodcut_id
from long-chariot-348511.chapter3.popular_products; -- 카테고리별로 순위가 가장 높은 제품 아이디 추출 --


